// <auto-generated />
using System;
using ErrorCenter.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ErrorCenter.Data.Migrations
{
    [DbContext(typeof(ErrorCenterContext))]
    partial class ErrorCenterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ErrorCenter.Domain.Models.Environment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("environment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Produção"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Homologação"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dev"
                        });
                });

            modelBuilder.Entity("ErrorCenter.Domain.Models.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("integer");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int>("SituationId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SituationId");

                    b.ToTable("ERROR");
                });

            modelBuilder.Entity("ErrorCenter.Domain.Models.ErrorOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Details")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("ErrorId")
                        .HasColumnType("integer");

                    b.Property<int>("EventCount")
                        .HasColumnType("integer");

                    b.Property<string>("Origin")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ErrorId");

                    b.HasIndex("UserId");

                    b.ToTable("Error_Occurrence");
                });

            modelBuilder.Entity("ErrorCenter.Domain.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("level");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "debug"
                        },
                        new
                        {
                            Id = 2,
                            Name = "warning"
                        },
                        new
                        {
                            Id = 3,
                            Name = "error"
                        });
                });

            modelBuilder.Entity("ErrorCenter.Domain.Models.Situation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("situation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Normal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Arquivado"
                        });
                });

            modelBuilder.Entity("ErrorCenter.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Token")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user1@sp.com.br",
                            Name = "Usuário 1",
                            Password = "202cb962ac59075b964b07152d234b70",
                            Token = "f909afb2-a549-497b-b30b-3a32ae22888a"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user2@sp.com.br",
                            Name = "Usuário 2",
                            Password = "289dff07669d7a23de0ef88d2f7129e7",
                            Token = "13fd83ca-3ab0-49a4-9e26-fb6f45f696b8"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user3@sp.com.br",
                            Name = "Usuário 3",
                            Password = "d81f9c1be2e08964bf9f24b15f0e4900",
                            Token = "6d8ee5ad-614c-4804-a3f8-33fcd0b8a506"
                        },
                        new
                        {
                            Id = 4,
                            Email = "user4@sp.com.br",
                            Name = "Usuário 4",
                            Password = "250cf8b51c773f3f8dc8b4be867a9a02",
                            Token = "ef52aa39-527c-40f9-ac7c-13d334ecf2a6"
                        },
                        new
                        {
                            Id = 5,
                            Email = "user5@sp.com.br",
                            Name = "Usuário 5",
                            Password = "99c5e07b4d5de9d18c350cdf64c5aa3d",
                            Token = "81eeefe1-8310-4b94-970f-43844eb4a0a9"
                        },
                        new
                        {
                            Id = 6,
                            Email = "user6@sp.com.br",
                            Name = "Usuário 6",
                            Password = "9fe8593a8a330607d76796b35c64c600",
                            Token = "adc4d2d6-55b1-4511-b630-53e2120e692c"
                        },
                        new
                        {
                            Id = 7,
                            Email = "user7@sp.com.br",
                            Name = "Usuário 7",
                            Password = "68053af2923e00204c3ca7c6a3150cf7",
                            Token = "d1fe7bdf-6855-46b3-a470-f5851551ed04"
                        },
                        new
                        {
                            Id = 8,
                            Email = "user8@sp.com.br",
                            Name = "Usuário 8",
                            Password = "86a1fa88adb5c33bd7a68ac2f9f3f96b",
                            Token = "54df8320-083f-4da7-aea4-d56126e6894b"
                        },
                        new
                        {
                            Id = 9,
                            Email = "user9@sp.com.br",
                            Name = "Usuário 9",
                            Password = "7cf08c3ddac57a6d4f28034f88bfb23e",
                            Token = "f73aed4b-90f3-41f6-a626-3737677628bc"
                        },
                        new
                        {
                            Id = 10,
                            Email = "user10@sp.com.br",
                            Name = "Usuário 10",
                            Password = "cdd773039f5b1a8f41949a1fccd0768f",
                            Token = "38ddf0af-4f4d-44d4-bdaa-b7a8fde04b68"
                        });
                });

            modelBuilder.Entity("ErrorCenter.Domain.Models.Error", b =>
                {
                    b.HasOne("ErrorCenter.Domain.Models.Environment", "Environment")
                        .WithMany("Errors")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ErrorCenter.Domain.Models.Level", "Level")
                        .WithMany("Errors")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ErrorCenter.Domain.Models.Situation", "Situation")
                        .WithMany("Errors")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ErrorCenter.Domain.Models.ErrorOccurrence", b =>
                {
                    b.HasOne("ErrorCenter.Domain.Models.Error", "Error")
                        .WithMany("ErrorOccurrences")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ErrorCenter.Domain.Models.User", "User")
                        .WithMany("ErrorOccurrences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
